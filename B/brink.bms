# Brink sdpk2 (script 0.2a)
# script for QuickBMS http://quickbms.aluigi.org

# http://svn.gib.me/public/brink
# https://github.com/komiga/brinktools

endian big
idstring "PSAR"
get MajorVersion short
get MinorVersion short
getdstring CompressionFormat 4
if CompressionFormat == "lzx "
    comtype xmemdecompress
elif CompressionFormat == "lzma"
    comtype lzma
elif CompressionFormat == "zlib"
    comtype zlib
endif
get headerSize long
get entrySize long
get entryCount long
get DataBlockSize long
get CompressedBlockValueSize long

math headerSize -= 32
savepos INFO_OFF
xmath EXTRA_OFF "INFO_OFF + (entryCount * entrySize)"
xmath EXTRA_Count "(headerSize - (entryCount * entrySize)) / 2"
goto EXTRA_OFF
for i = 0 < EXTRA_Count
    if CompressedBlockValueSize == 1
        get ZSIZE byte
    elif CompressedBlockValueSize == 4
        get ZSIZE long
    else
        get ZSIZE short
    endif
    putarray 0 i ZSIZE
next i

for i = 0 < entryCount
    goto INFO_OFF
    getdstring HASH 16
    get CompressedBlockSizeIndex long

    get TMP byte
    get UncompressedSize long
    math TMP <<= 32
    math UncompressedSize |= TMP

    get TMP byte
    get Offset long
    math TMP <<= 32
    math Offset |= TMP

    math INFO_OFF += entrySize

    putvarchr MEMORY_FILE UncompressedSize 0
    log MEMORY_FILE 0 0
    append
    for SIZE = 0 < UncompressedSize
        getarray ZSIZE 0 CompressedBlockSizeIndex
        xmath REMAINING "UncompressedSize - SIZE"
        if zsize == DataBlockSize || zsize == REMAINING
            log MEMORY_FILE Offset zsize
        else
            clog MEMORY_FILE Offset zsize DataBlockSize
        endif
        get SIZE asize MEMORY_FILE
        math Offset    += zsize
    next CompressedBlockSizeIndex
    append

    log "" 0 UncompressedSize MEMORY_FILE
next i
